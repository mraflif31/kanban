{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["initialData","columns","id","title","taskIds","tasks","issue_id","assignee","start_date","end_date","tags","columnIds","tagsColor","backgroundColor","color","App","getDroppableStyle","isDraggingOver","getDraggableStyle","isDragging","draggableStyle","getTagStyle","tag","state","getDays","date","parsedDate","moment","diff","now","parsedDateStyle","parsedDataContent","fontSize","toString","style","className","createTask","columnId","newTaskId","Object","keys","length","newTask","newColumnTasks","Array","from","splice","newColumn","setState","showModal","titleValue","selectValue","assigneeValue","startDate","endDate","validated","onDragEnd","bind","result","this","destination","source","droppableId","newStartTaskArray","newDestTaskArray","index","removed","newStartColumn","newDestColumn","newTaskArray","src","alt","map","column","key","type","onClick","provided","snapshot","droppableProps","ref","innerRef","task","draggableId","draggableProps","dragHandleProps","placeholder","Modal","show","centered","onHide","Form","noValidate","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","Body","Group","controlId","Label","Control","autoComplete","isInvalid","onChange","target","value","required","as","disabled","Footer","Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98c3516c.chunk.js","sourcesContent":["export const initialData = {\r\n  columns: {\r\n    'column-1': { id: 'column-1', title: 'Backlog', taskIds: ['task-1', 'task-2','task-3'] },\r\n    'column-2': { id: 'column-2', title: 'To Do', taskIds: [] },\r\n    'column-3': { id: 'column-3', title: 'Done', taskIds: [] },\r\n  },\r\n  tasks: {\r\n    'task-1': {\r\n      issue_id: 'task-1',\r\n      title: 'Improve accuracy of voice-to-text model',\r\n      assignee: 'C',\r\n      start_date: '2020-03-10',\r\n      end_date: '2020-03-18',\r\n      tags: 'Research',\r\n    },\r\n    'task-2': {\r\n      issue_id: 'task-2',\r\n      title: 'Create API to load user info from database',\r\n      assignee: 'C',\r\n      start_date: '2020-03-10',\r\n      end_date: '2020-03-22',\r\n      tags: 'Backend',\r\n    },\r\n    'task-3': {\r\n      issue_id: 'task-3',\r\n      title: 'Two-factor authentication to make private',\r\n      assignee: 'C',\r\n      start_date: '2020-03-10',\r\n      end_date: '2020-03-23',\r\n      tags: 'Design',\r\n    },\r\n  },\r\n  columnIds: ['column-1','column-2','column-3'],\r\n  tagsColor: {\r\n    'Research' : {id: 'Research', backgroundColor: \"#FFF3D2\", color: \"#F1C330\" },\r\n    'Backend' : {id: 'Backend', backgroundColor: \"#FFE5F0\", color: \"#F46FB5\" },\r\n    'Design' : {id: 'Design', backgroundColor: \"#E3EFFF\", color: \"#3F8CD9\" },\r\n  },\r\n}","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n\r\nimport './App.css';\r\nimport { initialData } from './data.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      ...initialData,\r\n      showModal: false,\r\n      titleValue: \"\",\r\n      selectValue: \"\",\r\n      assigneeValue: \"\",\r\n      startDate: '',\r\n      endDate: '',\r\n      validated: false,\r\n      columnId: null,\r\n    };\r\n\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    const { columns } = this.state;\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    if (result.source.droppableId === result.destination.droppableId) {\r\n      const newTaskArray = Array.from(columns[result.source.droppableId].taskIds);\r\n      const [removed] = newTaskArray.splice(result.source.index, 1);\r\n      newTaskArray.splice(result.destination.index, 0, removed);\r\n\r\n      const newColumn = {\r\n        ...columns[result.source.droppableId],\r\n        taskIds: newTaskArray,\r\n      };\r\n\r\n      this.setState({\r\n        columns: {\r\n          ...columns,\r\n          [result.source.droppableId]: newColumn,\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const newStartTaskArray = Array.from(columns[result.source.droppableId].taskIds);\r\n    const newDestTaskArray = Array.from(columns[result.destination.droppableId].taskIds);\r\n    const [removed] = newStartTaskArray.splice(result.source.index, 1);\r\n    newDestTaskArray.splice(result.destination.index, 0, removed);\r\n\r\n    const newStartColumn = {\r\n      ...columns[result.source.droppableId],\r\n      taskIds: newStartTaskArray,\r\n    }\r\n\r\n    const newDestColumn = {\r\n      ...columns[result.destination.droppableId],\r\n      taskIds: newDestTaskArray,\r\n    }\r\n\r\n    this.setState({\r\n      columns: {\r\n        ...columns,\r\n        [result.source.droppableId]: newStartColumn,\r\n        [result.destination.droppableId]: newDestColumn,\r\n      },\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  getDroppableStyle = isDraggingOver => ({\r\n    backgroundColor: isDraggingOver ? \"#808080\" : \"#FFFFFF\",\r\n  })\r\n\r\n  getDraggableStyle = (isDragging, draggableStyle) => ({\r\n    // backgroundColor: isDragging ? \"#138535\" : \"#F7F6F3\",\r\n    ...draggableStyle\r\n  })\r\n\r\n  getTagStyle = (tag) => {\r\n    const { tagsColor } = this.state;\r\n    return {\r\n      backgroundColor: tagsColor[tag].backgroundColor,\r\n      color: tagsColor[tag].color,\r\n    };\r\n  }\r\n\r\n  getDays = (date) => {\r\n    const parsedDate = moment(date, 'YYYY-MM-DD').diff(moment.now(), 'days');\r\n    let parsedDateStyle = null;\r\n    let parsedDataContent = null;\r\n    if (parsedDate >= 0) {\r\n      parsedDateStyle = {\r\n        fontSize: 10,\r\n        color: 'gray',\r\n      }\r\n      if (parsedDate === 0) {\r\n        parsedDataContent = 'Today';\r\n      } else if (parsedDate === 1) {\r\n        parsedDataContent = 'Tomorrow';\r\n      } else if (parsedDate > 1) {\r\n        parsedDataContent = parsedDate.toString() + ' days';\r\n      }\r\n    } else {\r\n      const negativeParsedDate = - 1 * parsedDate;\r\n      parsedDateStyle = {\r\n        fontSize: 10,\r\n        color: 'red',\r\n      }\r\n      if (parsedDate === -1) {\r\n        parsedDataContent = 'Yesterday';\r\n      } else {\r\n        parsedDataContent = negativeParsedDate.toString() + ' days ago';\r\n      }\r\n    }\r\n    return <span style={parsedDateStyle} className=\"ml-auto font-weight-bold day my-auto\">{parsedDataContent}</span>\r\n  }\r\n\r\n  createTask = (title, tags, assignee, start_date, end_date, columnId) => {\r\n    const {tasks, columns} = this.state;\r\n\r\n    const newTaskId = 'task-' + (Object.keys(tasks).length + 1).toString();\r\n    const newTask = {\r\n      issue_id: newTaskId,\r\n      title,\r\n      assignee,\r\n      start_date,\r\n      end_date,\r\n      tags,\r\n    }\r\n\r\n    const newColumnTasks = Array.from(columns[columnId].taskIds);\r\n    newColumnTasks.splice(newColumnTasks.length, 0, newTaskId);\r\n\r\n    const newColumn = {\r\n      ...columns[columnId],\r\n      taskIds: newColumnTasks\r\n    };\r\n\r\n    this.setState({\r\n      tasks: {\r\n        ...tasks,\r\n        [newTaskId]: newTask,\r\n      },\r\n      columns: {\r\n        ...columns,\r\n        [columnId]: newColumn,\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { columnIds, columns, tasks, showModal, selectValue, assigneeValue, titleValue, startDate, endDate, validated, columnId } = this.state;\r\n    const { getDroppableStyle, getDraggableStyle, createTask, getTagStyle, getDays } = this;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <body className=\"App-body\">\r\n          <div className=\"d-flex\">\r\n            <img className=\"App-logo\" src=\"images/prosa-logo.png\" alt=\"\"/>\r\n            <h2>Kanban Prosa</h2>\r\n          </div>\r\n          <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <div className=\"d-flex\">\r\n            {\r\n              columnIds.map((column) => (\r\n                  <div\r\n                    className=\"border px-2 py-1 column mr-2 h-50 rounded\" \r\n                    key={columns[column].id}\r\n                  >\r\n                    <div className=\"d-flex justify-content-between align-items-center mt-2\">\r\n                      <h5 className=\"\">{columns[column].title}</h5>\r\n                      <button type=\"button\" className=\"btn btn-sm btn-info rounded-pill mr-1\" onClick={() => this.setState({showModal: true, columnId: column})}>\r\n                        + Add Task\r\n                      </button>\r\n                    </div>\r\n                    <Droppable\r\n                      // key={columns[column].id}\r\n                      droppableId={columns[column].id}\r\n                    >\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          // key={columns[column].id}\r\n                          className=\"px-2 py-1 my-2 rounded droppable\"\r\n                          {...provided.droppableProps}\r\n                          ref={provided.innerRef}\r\n                          style={getDroppableStyle(snapshot.isDraggingOver)}\r\n                        >\r\n                          {columns[column].taskIds.map((task, index) => (\r\n                            <Draggable\r\n                              key={tasks[task].issue_id}\r\n                              draggableId={tasks[task].issue_id}\r\n                              index={index}\r\n                            >\r\n                              {(provided, snapshot) => (\r\n                                <div\r\n                                  // key={tasks[task].id}\r\n                                  className=\"draggable px-2 py-2 my-2 rounded\"\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                  style={getDraggableStyle(snapshot.isDragging, provided.draggableProps.style)}\r\n                                >\r\n                                  <h6>{tasks[task].title}</h6>\r\n                                  <div className=\"d-flex\">\r\n                                    <div className=\"bg-secondary rounded-circle assignee d-flex justify-content-center my-auto font-weight-bold text-uppercase\">\r\n                                      <span>{tasks[task].assignee[0]}</span>\r\n                                    </div>\r\n                                    <span className=\"rounded-pill px-1 text-uppercase tags ml-2 mt-1 font-weight-bold\" style={getTagStyle(tasks[task].tags)}>{tasks[task].tags}</span>\r\n                                    {/* <span className=\"ml-auto font-weight-bold day my-auto\">{getDays(tasks[task].end_date)}</span> */}\r\n                                    {getDays(tasks[task].end_date)}\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                            </Draggable>\r\n                          ))}\r\n                          {provided.placeholder}\r\n                        </div>\r\n                      )}\r\n                    </Droppable>\r\n                  </div>\r\n                )\r\n              )\r\n            }\r\n            </div>\r\n          </DragDropContext>\r\n          <Modal\r\n            show={showModal}\r\n            centered\r\n            onHide={() => this.setState({showModal: false, selectValue: \"\", validated: false})}\r\n          >\r\n            <Form\r\n              noValidate\r\n              onSubmit={(event) => {\r\n                this.setState({validated: true})\r\n\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                if (event.currentTarget.checkValidity()) {\r\n                  createTask(titleValue, selectValue, assigneeValue, startDate, endDate, columnId);\r\n                  this.setState({\r\n                    titleValue: '',\r\n                    selectValue: '',\r\n                    assigneeValue: '',\r\n                    startDate: '',\r\n                    endDate: '',\r\n                    validated: false,\r\n                    showModal: false,\r\n                  })\r\n                }\r\n              }}\r\n            >\r\n              <Modal.Body>\r\n                <h4>New Task</h4>\r\n                  <Form.Group controlId=\"formTitle\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control autoComplete=\"off\" isInvalid={validated && titleValue === ''} onChange={(event) => this.setState({titleValue: event.target.value})} value={titleValue} type=\"text\" placeholder=\"Enter Title\"/>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formTags\">\r\n                    <Form.Label>Tags</Form.Label>\r\n                    <Form.Control required isInvalid={validated && selectValue === ''} value={selectValue} onChange={(event) => this.setState({selectValue: event.target.value})} as=\"select\">\r\n                      <option value={''} disabled>Select Tags</option>\r\n                      <option value={'Design'}>Design</option>\r\n                      <option value={'Backend'}>Backend</option>\r\n                      <option value={'Research'}>Research</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formAssignee\">\r\n                    <Form.Label>Assignee</Form.Label>\r\n                    <Form.Control autoComplete=\"off\" isInvalid={validated && assigneeValue === ''} onChange={(event) => this.setState({assigneeValue: event.target.value})} value={assigneeValue}  required type=\"text\" placeholder=\"Enter Title\"/>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formStartDate\">\r\n                    <Form.Label>Start Date</Form.Label>\r\n                    <Form.Control onChange={(event) => this.setState({startDate: event.target.value})} value={startDate} isInvalid={validated && startDate === null} required type=\"date\" placeholder=\"Enter Title\"/>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"formEndDate\">\r\n                    <Form.Label>End Date</Form.Label>\r\n                    <Form.Control onChange={(event) => this.setState({endDate: event.target.value})} value={endDate} isInvalid={validated && startDate === null}  required type=\"date\" placeholder=\"Enter Title\"/>\r\n                  </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button type=\"submit\">Submit</Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n        </body>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}